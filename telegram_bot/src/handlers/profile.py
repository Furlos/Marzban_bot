from aiogram import Router, types
from aiogram.filters import Command
from datetime import datetime
from telegram_bot.src.handlers.api_requests import get_user_by_username

profile_router = Router()


async def generate_profile_message(user: types.User):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = user.id
    username = user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
    api_response = await get_user_by_username(str(user_id))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not api_response or api_response.get("status") != 200:
        error_msg = api_response.get("error", "Unknown error") if api_response else "No response"
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {error_msg}", None

    data = api_response.get("data", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ["used_traffic_gb", "data_limit_gb", "expire_date"]
    if not all(field in data for field in required_fields):
        return "‚ùå –í –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è", None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        traffic_used = float(data["used_traffic_gb"])
        traffic_limit = float(data["data_limit_gb"])
        traffic_left = traffic_limit - traffic_used

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
        expire_date = datetime.strptime(data["expire_date"], "%Y-%m-%d")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üìõ Username: @{username}\n\n"
            f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {traffic_used:.1f} GB\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç: {traffic_limit} GB\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {traffic_left:.1f} GB\n\n"
            f"‚è≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b>\n"
            f"{expire_date.strftime('%d.%m.%Y')}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile"),
                types.InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay")
            ],
            [
                types.InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
            ]
        ])

        return profile_text, keyboard

    except (ValueError, KeyError) as e:
        print(f"Error processing profile data: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è", None


# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@profile_router.callback_query(lambda c: c.data == "profile")
async def process_profile(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    profile_text, keyboard = await generate_profile_message(callback.from_user)
    await callback.message.answer(
        profile_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@profile_router.callback_query(lambda c: c.data == "refresh_profile")
async def refresh_profile(callback: types.CallbackQuery):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    profile_text, keyboard = await generate_profile_message(callback.from_user)
    await callback.message.answer(
        profile_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! ‚úÖ", show_alert=False)

@profile_router.message(Command("start"))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä Command
async def process_start(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=keyboard
    )