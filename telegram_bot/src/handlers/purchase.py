from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

from .api_requests import update_user
from .instruction import instruction_router

purchase_router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTIONS = {
    "1": {"months": 1, "price": 150, "label": "1 –º–µ—Å—è—Ü - 150‚≠ê"},  # —Ü–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
    "3": {"months": 3, "price": 350, "label": "3 –º–µ—Å—è—Ü–∞ - 350‚≠ê"},
    "6": {"months": 6, "price": 750, "label": "6 –º–µ—Å—è—Ü–µ–≤ - 750‚≠ê"},
    "12": {"months": 12, "price": 1000, "label": "12 –º–µ—Å—è—Ü–µ–≤ - 1000‚≠ê"}
}

def payment_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å", pay=True)
    return builder.as_markup()

def get_subscription_keyboard():
    builder = InlineKeyboardBuilder()
    for sub_id, sub_data in SUBSCRIPTIONS.items():
        builder.button(text=sub_data["label"], callback_data=f"sub_{sub_id}")
    builder.adjust(2)
    return builder.as_markup()


@purchase_router.callback_query(F.data == "pay")
async def show_subscriptions(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_subscription_keyboard()
    )
    await callback.answer()

@purchase_router.callback_query(F.data.startswith("sub_"))
async def process_subscription(callback: types.CallbackQuery):
    sub_id = callback.data.split("_")[1]
    sub_data = SUBSCRIPTIONS.get(sub_id)

    if not sub_data:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        return

    try:
        await callback.message.answer_invoice(
            title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ {sub_data['months']} –º–µ—Å",
            description=f"–î–æ—Å—Ç—É–ø –Ω–∞ {sub_data['months']} –º–µ—Å—è—Ü–µ–≤",
            payload=f"sub_{sub_id}_{callback.from_user.id}",
            provider_token="",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            currency="XTR",
            prices=[LabeledPrice(label="Stars", amount=sub_data["price"])],
            reply_markup=payment_keyboard()
        )
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")
        print(f"Error: {e}")

    await callback.answer()

@purchase_router.pre_checkout_query()
async def pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)


@purchase_router.message(F.successful_payment)
async def success_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    if not payload.startswith("sub_"):
        return

    _, sub_id, user_id = payload.split("_", 2)
    sub_data = SUBSCRIPTIONS.get(sub_id)

    if not sub_data:
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
    days = sub_data["months"]*30
    await update_user(f"{message.from_user.id}", 100,days,True)
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ {sub_data['months']} –º–µ—Å!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )